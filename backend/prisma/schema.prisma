// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// When updating this file: npx prisma db push (will push changes to Neon) (from backend when running command)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(cuid())
  name                 String
  email                String          @unique
  password             String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  googleAccounts       GoogleAccount[] @relation("UserGoogleAccounts")
  activeGoogleAccountId String?        @unique
  activeGoogleAccount  GoogleAccount?  @relation("ActiveGoogleAccount", fields: [activeGoogleAccountId], references: [id], onDelete: SetNull)
}

model GoogleAccount {
  id           String   @id @default(cuid())
  userId       String
  email        String   @unique
  accessToken  String?
  refreshToken String
  tokenExpiry  DateTime?
  scopes       String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation("UserGoogleAccounts", fields: [userId], references: [id], onDelete: Cascade)
  activeForUser User?   @relation("ActiveGoogleAccount")
  tasks        UnsubscribeTask[]

  @@unique([userId, email], name: "userId_email")
}

model UnsubscribeTask {
  id              String    @id @default(cuid())
  googleAccountId String
  url             String
  status          String    @default("pending")
  errorMessage    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  googleAccount   GoogleAccount @relation(fields: [googleAccountId], references: [id], onDelete: Cascade)

  @@unique([googleAccountId, url])
}