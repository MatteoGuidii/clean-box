// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// When updating this file: npx prisma db push (will push changes to Neon) (from backend when running command)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Models
model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Google OAuth fields
  isGmailConnected  Boolean? @default(false)
  googleEmail       String?
  googleAccessToken String?  // Optional: Store short-lived access token
  googleRefreshToken String?  // Essential: Store long-lived refresh token (**ENCRYPT THIS IN PROD**)
  googleTokenExpiry DateTime? // Optional: Store expiry date of access token
  googleScopes      String[] // Optional: Store granted scopes

  // Relational field: one-to-many
  tasks      UnsubscribeTask[]
}

model UnsubscribeTask {
  id         String    @id @default(cuid())
  userId     String
  url        String
  status     String    @default("pending") // e.g. pending, success, failed
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relation back to the user
  user       User      @relation(fields: [userId], references: [id])

   @@unique([userId, url])
}